// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace TitanicPredictor_MachineLearning
{
    public partial class TitanicAuto01
    {
        /// <summary>
        /// model input class for TitanicAuto01.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [LoadColumn(1)]
            [ColumnName(@"Survived")]
            public bool Survived { get; set; }

            [LoadColumn(2)]
            [ColumnName(@"Pclass")]
            public float Pclass { get; set; }

            [LoadColumn(3)]
            [ColumnName(@"Name")]
            public string Name { get; set; }

            [LoadColumn(4)]
            [ColumnName(@"Sex")]
            public string Sex { get; set; }

            [LoadColumn(5)]
            [ColumnName(@"Age")]
            public float Age { get; set; }

            [LoadColumn(6)]
            [ColumnName(@"SibSp")]
            public float SibSp { get; set; }

            [LoadColumn(7)]
            [ColumnName(@"Parch")]
            public float Parch { get; set; }

            [LoadColumn(8)]
            [ColumnName(@"Ticket")]
            public string Ticket { get; set; }

            [LoadColumn(9)]
            [ColumnName(@"Fare")]
            public float Fare { get; set; }

            [LoadColumn(10)]
            [ColumnName(@"Cabin")]
            public string Cabin { get; set; }

            [LoadColumn(11)]
            [ColumnName(@"Embarked")]
            public string Embarked { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for TitanicAuto01.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"Survived")]
            public bool Survived { get; set; }

            [ColumnName(@"Pclass")]
            public float Pclass { get; set; }

            [ColumnName(@"Name")]
            public float[] Name { get; set; }

            [ColumnName(@"Sex")]
            public float[] Sex { get; set; }

            [ColumnName(@"Age")]
            public float Age { get; set; }

            [ColumnName(@"SibSp")]
            public float SibSp { get; set; }

            [ColumnName(@"Parch")]
            public float Parch { get; set; }

            [ColumnName(@"Ticket")]
            public float[] Ticket { get; set; }

            [ColumnName(@"Fare")]
            public float Fare { get; set; }

            [ColumnName(@"Cabin")]
            public float[] Cabin { get; set; }

            [ColumnName(@"Embarked")]
            public float[] Embarked { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"PredictedLabel")]
            public bool PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float Score { get; set; }

            [ColumnName(@"Probability")]
            public float Probability { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("TitanicAuto01.mlnet");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);


        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }
    }
}
